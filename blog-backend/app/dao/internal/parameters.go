// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// ParametersDao is the manager for logic model data accessing and custom defined data operations functions management.
type ParametersDao struct {
	Table   string            // Table is the underlying table name of the DAO.
	Group   string            // Group is the database configuration group name of current DAO.
	Columns ParametersColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// ParametersColumns defines and stores column names for table parameters.
type ParametersColumns struct {
	Id         string // 自增ID
	CreateAt   string // 创建时间
	UpdateAt   string // 更新时间
	DeleteAt   string // 删除时间
	BaseMenuId string // BaseMenu的ID
	Type       string // 地址栏携带参数为params还是query
	Key        string // 地址栏携带参数的key
	Value      string // 地址栏携带参数的值
}

//  parametersColumns holds the columns for table parameters.
var parametersColumns = ParametersColumns{
	Id:         "id",
	CreateAt:   "create_at",
	UpdateAt:   "update_at",
	DeleteAt:   "delete_at",
	BaseMenuId: "base_menu_id",
	Type:       "type",
	Key:        "key",
	Value:      "value",
}

// NewParametersDao creates and returns a new DAO object for table data access.
func NewParametersDao() *ParametersDao {
	return &ParametersDao{
		Group:   "default",
		Table:   "parameters",
		Columns: parametersColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *ParametersDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *ParametersDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *ParametersDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
