// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// OperationsDao is the manager for logic model data accessing and custom defined data operations functions management.
type OperationsDao struct {
	Table   string            // Table is the underlying table name of the DAO.
	Group   string            // Group is the database configuration group name of current DAO.
	Columns OperationsColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// OperationsColumns defines and stores column names for table operations.
type OperationsColumns struct {
	Id           string // 自增ID
	CreateAt     string // 创建时间
	UpdateAt     string // 更新时间
	DeleteAt     string // 删除时间
	Ip           string // 请求ip
	Method       string // 请求方法
	Path         string // 请求路由
	Status       string // 状态
	Latency      string // 延迟
	Agent        string // 代理
	ErrorMessage string // 报错信息
	Request      string // 请求Body
	UserId       string // 用户id
	Response     string // 响应Body
}

//  operationsColumns holds the columns for table operations.
var operationsColumns = OperationsColumns{
	Id:           "id",
	CreateAt:     "create_at",
	UpdateAt:     "update_at",
	DeleteAt:     "delete_at",
	Ip:           "ip",
	Method:       "method",
	Path:         "path",
	Status:       "status",
	Latency:      "latency",
	Agent:        "agent",
	ErrorMessage: "error_message",
	Request:      "request",
	UserId:       "user_id",
	Response:     "response",
}

// NewOperationsDao creates and returns a new DAO object for table data access.
func NewOperationsDao() *OperationsDao {
	return &OperationsDao{
		Group:   "default",
		Table:   "operations",
		Columns: operationsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OperationsDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OperationsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OperationsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
