// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// BreakpointFilesDao is the manager for logic model data accessing and custom defined data operations functions management.
type BreakpointFilesDao struct {
	Table   string                 // Table is the underlying table name of the DAO.
	Group   string                 // Group is the database configuration group name of current DAO.
	Columns BreakpointFilesColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// BreakpointFilesColumns defines and stores column names for table breakpoint_files.
type BreakpointFilesColumns struct {
	Id         string // 自增ID
	CreateAt   string // 更新时间
	UpdateAt   string // 更新时间
	DeleteAt   string // 删除时间
	FileName   string // 文件名
	FileMd5    string // 文件md5
	FilePath   string // 文件路径
	ChunkId    string // 关联id
	ChunkTotal string // 切片总数
	IsFinish   string // 是否完整
}

//  breakpointFilesColumns holds the columns for table breakpoint_files.
var breakpointFilesColumns = BreakpointFilesColumns{
	Id:         "id",
	CreateAt:   "create_at",
	UpdateAt:   "update_at",
	DeleteAt:   "delete_at",
	FileName:   "file_name",
	FileMd5:    "file_md5",
	FilePath:   "file_path",
	ChunkId:    "chunk_id",
	ChunkTotal: "chunk_total",
	IsFinish:   "is_finish",
}

// NewBreakpointFilesDao creates and returns a new DAO object for table data access.
func NewBreakpointFilesDao() *BreakpointFilesDao {
	return &BreakpointFilesDao{
		Group:   "default",
		Table:   "breakpoint_files",
		Columns: breakpointFilesColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BreakpointFilesDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BreakpointFilesDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BreakpointFilesDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
