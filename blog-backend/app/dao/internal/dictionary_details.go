// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// DictionaryDetailsDao is the manager for logic model data accessing and custom defined data operations functions management.
type DictionaryDetailsDao struct {
	Table   string                   // Table is the underlying table name of the DAO.
	Group   string                   // Group is the database configuration group name of current DAO.
	Columns DictionaryDetailsColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// DictionaryDetailsColumns defines and stores column names for table dictionary_details.
type DictionaryDetailsColumns struct {
	Id           string // 自增ID
	CreateAt     string // 创建时间
	UpdateAt     string // 更新时间
	DeleteAt     string // 删除时间
	Label        string // 展示值
	Value        string // 字典值
	Status       string // 启用状态
	Sort         string // 排序标记
	DictionaryId string // 关联标记
}

//  dictionaryDetailsColumns holds the columns for table dictionary_details.
var dictionaryDetailsColumns = DictionaryDetailsColumns{
	Id:           "id",
	CreateAt:     "create_at",
	UpdateAt:     "update_at",
	DeleteAt:     "delete_at",
	Label:        "label",
	Value:        "value",
	Status:       "status",
	Sort:         "sort",
	DictionaryId: "dictionary_id",
}

// NewDictionaryDetailsDao creates and returns a new DAO object for table data access.
func NewDictionaryDetailsDao() *DictionaryDetailsDao {
	return &DictionaryDetailsDao{
		Group:   "default",
		Table:   "dictionary_details",
		Columns: dictionaryDetailsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DictionaryDetailsDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DictionaryDetailsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DictionaryDetailsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
