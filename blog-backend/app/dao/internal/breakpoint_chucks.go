// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// BreakpointChucksDao is the manager for logic model data accessing and custom defined data operations functions management.
type BreakpointChucksDao struct {
	Table   string                  // Table is the underlying table name of the DAO.
	Group   string                  // Group is the database configuration group name of current DAO.
	Columns BreakpointChucksColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// BreakpointChucksColumns defines and stores column names for table breakpoint_chucks.
type BreakpointChucksColumns struct {
	Id              string // 自增ID
	CreateAt        string // 更新时间
	UpdateAt        string // 更新时间
	DeleteAt        string // 删除时间
	ExaFileId       string // 文件id
	FileChunkPath   string // 切片路径
	FileChunkNumber string // 切片标号
}

//  breakpointChucksColumns holds the columns for table breakpoint_chucks.
var breakpointChucksColumns = BreakpointChucksColumns{
	Id:              "id",
	CreateAt:        "create_at",
	UpdateAt:        "update_at",
	DeleteAt:        "delete_at",
	ExaFileId:       "exa_file_id",
	FileChunkPath:   "file_chunk_path",
	FileChunkNumber: "file_chunk_number",
}

// NewBreakpointChucksDao creates and returns a new DAO object for table data access.
func NewBreakpointChucksDao() *BreakpointChucksDao {
	return &BreakpointChucksDao{
		Group:   "default",
		Table:   "breakpoint_chucks",
		Columns: breakpointChucksColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BreakpointChucksDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BreakpointChucksDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BreakpointChucksDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
