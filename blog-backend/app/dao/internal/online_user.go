// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// OnlineUserDao is the manager for logic model data accessing and custom defined data operations functions management.
type OnlineUserDao struct {
	Table   string            // Table is the underlying table name of the DAO.
	Group   string            // Group is the database configuration group name of current DAO.
	Columns OnlineUserColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// OnlineUserColumns defines and stores column names for table online_user.
type OnlineUserColumns struct {
	Id        string //
	Uuid      string // 用户的uuid
	Username  string // 在线用户名
	Token     string // 在线用户token
	Explorer  string // 在线用户浏览器类型
	Os        string // 在线用户的操作系统类型
	LoginTime string //
	IsAdmin   string // 是否是管理员
}

//  onlineUserColumns holds the columns for table online_user.
var onlineUserColumns = OnlineUserColumns{
	Id:        "id",
	Uuid:      "uuid",
	Username:  "username",
	Token:     "token",
	Explorer:  "explorer",
	Os:        "os",
	LoginTime: "login_time",
	IsAdmin:   "is_admin",
}

// NewOnlineUserDao creates and returns a new DAO object for table data access.
func NewOnlineUserDao() *OnlineUserDao {
	return &OnlineUserDao{
		Group:   "default",
		Table:   "online_user",
		Columns: onlineUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *OnlineUserDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *OnlineUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *OnlineUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
